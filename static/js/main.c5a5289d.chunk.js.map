{"version":3,"sources":["components/Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Board","boardState","onSquareClicked","width","height","winningMoves","Square","idx","row","col","className","includes","onClick","Array","fill","map","temp2","tmp1","allEqual","arr","length","every","v","calculateWinner","board","boardWitdth","numToWin","temp","i","console","log","horizontalLine","_","offset","rowNumbers","Math","floor","verticalLine","diagonalLeft","diagonalRight","App","React","useState","moveHistory","setMoveHistory","boardHistory","setBoardHistory","stepNumber","setStepNumber","isXTurn","setIsXTurn","winner","setWinner","setWinningMoves","isSortAsc","setSortAsc","WIDTH","setWidth","NUM_TO_WIN","setNumToWin","resetBoard","htmlFor","type","min","max","value","onChange","ev","Number","target","prev","isAsc","res","reverse","getIndicesArr","index","step","curWinner","jumpTo","newMoveHistory","slice","history","squares","xTurn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5a5289d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BoardPropsType } from './type';\r\n\r\nexport const Board = ({ boardState, onSquareClicked, width, height, winningMoves }: BoardPropsType) => {\r\n  const checkSquareWinner = (idx: number): boolean => {\r\n    if (!winningMoves) return false;\r\n    if (winningMoves.includes(idx)) return true;\r\n    return false;\r\n  };\r\n\r\n  const Square = ({ row, col }: { row: number; col: number }): JSX.Element => (\r\n    <button\r\n      className={`square ${checkSquareWinner(row * width + col) && 'win'} ${boardState[row * width + col]}`}\r\n      onClick={() => {\r\n        if (onSquareClicked) onSquareClicked(row * width + col);\r\n      }}\r\n    >\r\n      {boardState[row * width + col]}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {Array(height)\r\n        .fill(null)\r\n        .map((temp2, row) => (\r\n          <div key={row} className=\"board-row\">\r\n            {Array(width)\r\n              .fill(null)\r\n              .map((tmp1, col) => (\r\n                <Square row={row} col={col} />\r\n              ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './assets/styles/index.css';\nimport { SquareType } from './components/Board/type';\nimport { Board } from './components/Board';\n\nconst allEqual = (arr: any[]): boolean => {\n  if (arr.length === 0) return false;\n  return arr.every((v) => v === arr[0]);\n};\n\n/**\n * Calculate the winner\n * @param board  board state at the moment\n * @param boardWitdth Width of the board\n * @param numToWin Number consecutive 'O' or 'X' to win the game\n * @returns {[SquareType, number[]]} returns the array: [winner, winningMoves]. Null if the game is not finished\n */\nconst calculateWinner = (board: SquareType[], boardWitdth: number, numToWin: number): [SquareType, number[]] | null => {\n  const temp = Array(numToWin).fill(null);\n  for (let i = 0; i < board.length; i++) {\n    if (!board[i]) continue;\n    console.log('log ~ file: App.tsx ~ line 16 ~ calculateWinner ~ board[i]', board[i], i);\n    // Check in Horizontal direction: [i, i+1, i+2, i+3, ...] AND they are on the same row\n    const horizontalLine = temp.map((_, offset) => board[i + offset]);\n    const rowNumbers = temp.map((_, offset) => Math.floor((i + offset) / boardWitdth));\n    if (allEqual(rowNumbers) && allEqual(horizontalLine)) return [horizontalLine[0], temp.map((_, offset) => i + offset)];\n\n    // Check in Vertical direction: [i, i+1*width, i+2*width, i+3*width, ...]\n    const verticalLine = temp.map((_, offset) => board[i + offset * boardWitdth]);\n    if (allEqual(verticalLine)) return [verticalLine[0], temp.map((_, offset) => i + offset * boardWitdth)];\n\n    // Check in Left diagon direction (\"\\\"): [i, i+1*(width+1), i+2*(width+1), i+3*(width+1), ...]\n    const diagonalLeft = temp.map((_, offset) => board[i + offset * (boardWitdth + 1)]);\n    if (allEqual(diagonalLeft)) return [diagonalLeft[0], temp.map((_, offset) => i + offset * (boardWitdth + 1))];\n\n    // Check in Right diagon direction (\"/\"): [i, i+1*(width-1), i+2*(width-1), i+3*(width-1), ...] AND if they can form \"/\" direction\n    const diagonalRight = temp.map((_, offset) => board[i + offset * (boardWitdth - 1)]);\n    if (i % boardWitdth >= numToWin - 1 && allEqual(diagonalRight)) return [diagonalRight[0], temp.map((_, offset) => i + offset * (boardWitdth - 1))];\n  }\n  return null;\n};\n\ntype MoveHistory = { row: number; col: number } | null;\n\n// const WIDTH = 15;\n// const HEIGHT = 15;\n// const NUM_TO_WIN = 5;\n\nfunction App() {\n  const [moveHistory, setMoveHistory] = React.useState<MoveHistory[]>([null]);\n  const [boardHistory, setBoardHistory] = React.useState<SquareType[][]>([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = React.useState<number>(0);\n  const [isXTurn, setIsXTurn] = React.useState<boolean>(true);\n  const [winner, setWinner] = React.useState<SquareType>(null);\n  const [winningMoves, setWinningMoves] = React.useState<number[] | null>(null);\n  const [isSortAsc, setSortAsc] = React.useState<boolean>(true);\n\n  //EXTENSION:\n  const [WIDTH, setWidth] = React.useState<number>(5);\n  const [NUM_TO_WIN, setNumToWin] = React.useState<number>(5);\n\n  const handleClick = (i: number): void => {\n    const newMoveHistory = moveHistory.slice(0, stepNumber + 1);\n    const history = boardHistory.slice(0, stepNumber + 1);\n    const squares = history[history.length - 1].slice();\n\n    if (squares[i] || winner) return;\n    squares[i] = isXTurn ? 'X' : 'O';\n\n    const curWinner = calculateWinner(squares, WIDTH, NUM_TO_WIN);\n    if (curWinner) {\n      setWinner(curWinner[0]);\n      setWinningMoves(curWinner[1]);\n    }\n\n    setMoveHistory([...newMoveHistory, { row: Math.floor(i / WIDTH), col: i % WIDTH }]);\n    setBoardHistory([...history, [...squares]]);\n    setStepNumber(history.length);\n    setIsXTurn((xTurn) => !xTurn);\n  };\n\n  const jumpTo = (step: number): void => {\n    setStepNumber(step);\n    setIsXTurn(step % 2 === 0);\n    const curWinner = calculateWinner(boardHistory[step], WIDTH, NUM_TO_WIN);\n    if (curWinner) {\n      setWinner(curWinner[0]);\n      setWinningMoves(curWinner[1]);\n    } else {\n      setWinner(null);\n      setWinningMoves(null);\n    }\n  };\n\n  const resetBoard = () => {\n    setMoveHistory([null]);\n    setBoardHistory([Array(9).fill(null)]);\n    setStepNumber(0);\n    setIsXTurn(true);\n    setWinner(null);\n    setWinningMoves(null);\n    setSortAsc(true);\n  };\n\n  const getIndicesArr = (length: number, isAsc: boolean) => {\n    const res = Array(moveHistory.length)\n      .fill(null)\n      .map((_, idx) => idx);\n    return isAsc ? res : res.reverse();\n  };\n\n  const statusText = (): JSX.Element => {\n    if (winner) return <p className={`status ${winner}`}>Winner: {winner}</p>;\n    if (stepNumber === WIDTH * WIDTH) return <p className=\"status\">DRAW!</p>;\n    return <p className={`status ${isXTurn ? 'X' : 'O'}`}>Next player: {isXTurn ? 'X' : 'O'}</p>;\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-info\">\n        <p className=\"details\">\n          <b>18127136 - Nguyen Dang Huynh Long</b>\n          <br />\n          BTCN01 - PTUDWNC - 18KTPM1\n        </p>\n        <div className=\"config\">\n          <label htmlFor=\"gamesize\">\n            Board: ({WIDTH}x{WIDTH})\n          </label>\n          <input\n            type=\"range\"\n            min=\"3\"\n            max=\"25\"\n            value={WIDTH}\n            onChange={(ev) => {\n              const value = Number(ev.target.value);\n              setWidth(value);\n              if (value < NUM_TO_WIN) setNumToWin(value);\n              resetBoard();\n            }}\n          />\n        </div>\n        <div className=\"config\">\n          <label htmlFor=\"gamesize\">Moves to win: {NUM_TO_WIN} </label>\n          <input\n            type=\"range\"\n            min=\"3\"\n            max={WIDTH > 5 ? 5 : WIDTH}\n            value={NUM_TO_WIN}\n            onChange={(ev) => {\n              setNumToWin(Number(ev.target.value));\n              resetBoard();\n            }}\n          />\n        </div>\n\n        {statusText()}\n        <button onClick={() => setSortAsc((prev) => !prev)}>Sort: {isSortAsc ? 'DESC' : 'ASC'}</button>\n        <button onClick={() => resetBoard()}>Reset</button>\n        <ol>\n          {getIndicesArr(moveHistory.length, isSortAsc).map((index) => {\n            return (\n              <li key={index}>\n                <button className={`move-history ${index % 2 === 0 ? 'X' : 'O'} ${index === stepNumber && 'active'}`} onClick={() => jumpTo(index)}>\n                  {index === 0 ? 'Go to game start' : `Go to move #${index} (col: ${moveHistory[index]?.col}, row: ${moveHistory[index]?.row})`}\n                </button>\n              </li>\n            );\n          })}\n        </ol>\n      </div>\n\n      <div className=\"game-board\">\n        <Board boardState={boardHistory[stepNumber]} width={WIDTH} height={WIDTH} onSquareClicked={handleClick} winningMoves={winningMoves} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/**\n * [X] Display the location for each move in the format (col, row) in the move history list.\n * [X] Bold the currently selected item in the move list.\n * [X] Rewrite Board to use two loops to make the squares instead of hardcoding them. Rewrite winning rule to 5 consecutive squares.\n * [X] Add a toggle button that lets you sort the moves in either ascending or descending order.\n * [X] When someone wins, highlight the squares that caused the win.\n * [X] When no one wins, display a message about the result being a draw.\n */\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}