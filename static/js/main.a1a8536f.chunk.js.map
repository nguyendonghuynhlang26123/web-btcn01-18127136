{"version":3,"sources":["components/Board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Board","boardState","onSquareClicked","width","height","winningMoves","Square","idx","row","col","className","includes","onClick","Array","fill","map","temp2","tmp1","allEqual","arr","length","every","v","calculateWinner","board","boardWitdth","numToWin","temp","i","horizontalLine","_","offset","rowNumbers","Math","floor","verticalLine","diagonalLeft","diagonalRight","App","React","useState","moveHistory","setMoveHistory","boardHistory","setBoardHistory","stepNumber","setStepNumber","isXTurn","setIsXTurn","winner","setWinner","setWinningMoves","isSortAsc","setSortAsc","WIDTH","setWidth","NUM_TO_WIN","setNumToWin","resetBoard","htmlFor","type","min","max","value","onChange","ev","Number","target","prev","isAsc","res","reverse","getIndicesArr","index","step","curWinner","jumpTo","newMoveHistory","slice","history","squares","xTurn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1a8536f.chunk.js","sourcesContent":["import React from 'react';\nimport { BoardComponentPropsType, SquareComponentPropsType } from './type';\n\n/**\n * Board component of the game\n * @param {BoardComponentPropsType} props Props state. See {@link BoardComponentPropsType}\n * @returns {JSX.Element}\n */\nexport const Board = ({ boardState, onSquareClicked, width, height, winningMoves }: BoardComponentPropsType) => {\n  const checkSquareWinner = (idx: number): boolean => {\n    if (!winningMoves) return false;\n    if (winningMoves.includes(idx)) return true;\n    return false;\n  };\n\n  /**\n   * Square component\n   * @param squareProps See {@link SquareComponentPropsType}\n   * @returns {JSX.Element}\n   */\n  const Square = ({ row, col }: SquareComponentPropsType): JSX.Element => (\n    <button\n      className={`square ${checkSquareWinner(row * width + col) && 'win'} ${boardState[row * width + col]}`}\n      onClick={() => {\n        if (onSquareClicked) onSquareClicked(row * width + col);\n      }}\n    >\n      {boardState[row * width + col]}\n    </button>\n  );\n\n  return (\n    <div>\n      {Array(height)\n        .fill(null)\n        .map((temp2, row) => (\n          <div key={row} className=\"board-row\">\n            {Array(width)\n              .fill(null)\n              .map((tmp1, col) => (\n                <Square row={row} col={col} />\n              ))}\n          </div>\n        ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport './assets/styles/index.css';\nimport { SquareType } from './components/Board/type';\nimport { Board } from './components/Board';\n\n/**\n * Check if all elements in the array are equal to each other\n * @param arr\n * @returns {boolean}\n */\nconst allEqual = (arr: any[]): boolean => {\n  if (arr.length === 0) return false;\n  return arr.every((v) => v === arr[0]);\n};\n\n/**\n * Calculate the winner by looping through the board (brute-force)\n * @dev Check winning condition of an element in 4 direction: | (vertical), â€” (horizontal),  / (diagnonal right) ,  \\ (diagonal left)\n * @param board  board state at the moment\n * @param boardWitdth Width of the board\n * @param numToWin Number consecutive 'O' or 'X' to win the game\n * @returns {[SquareType, number[]]} returns the array: [winner, winningMoves]. Null if the game is not finished\n */\nconst calculateWinner = (board: SquareType[], boardWitdth: number, numToWin: number): [SquareType, number[]] | null => {\n  const temp = Array(numToWin).fill(null);\n  for (let i = 0; i < board.length; i++) {\n    if (!board[i]) continue;\n    // Check in Horizontal direction: [i, i+1, i+2, i+3, ...] AND they are on the same row\n    const horizontalLine = temp.map((_, offset) => board[i + offset]);\n    const rowNumbers = temp.map((_, offset) => Math.floor((i + offset) / boardWitdth));\n    if (allEqual(rowNumbers) && allEqual(horizontalLine)) return [horizontalLine[0], temp.map((_, offset) => i + offset)];\n\n    // Check in Vertical direction: [i, i+1*width, i+2*width, i+3*width, ...]\n    const verticalLine = temp.map((_, offset) => board[i + offset * boardWitdth]);\n    if (allEqual(verticalLine)) return [verticalLine[0], temp.map((_, offset) => i + offset * boardWitdth)];\n\n    // Check in Left diagon direction (\"\\\"): [i, i+1*(width+1), i+2*(width+1), i+3*(width+1), ...]\n    const diagonalLeft = temp.map((_, offset) => board[i + offset * (boardWitdth + 1)]);\n    if (allEqual(diagonalLeft)) return [diagonalLeft[0], temp.map((_, offset) => i + offset * (boardWitdth + 1))];\n\n    // Check in Right diagon direction (\"/\"): [i, i+1*(width-1), i+2*(width-1), i+3*(width-1), ...] AND if they can form \"/\" direction\n    const diagonalRight = temp.map((_, offset) => board[i + offset * (boardWitdth - 1)]);\n    if (i % boardWitdth >= numToWin - 1 && allEqual(diagonalRight)) return [diagonalRight[0], temp.map((_, offset) => i + offset * (boardWitdth - 1))];\n  }\n  return null;\n};\n\n// Move type\ntype MoveHistory = { row: number; col: number } | null;\n\nfunction App() {\n  const [moveHistory, setMoveHistory] = React.useState<MoveHistory[]>([null]);\n  const [boardHistory, setBoardHistory] = React.useState<SquareType[][]>([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = React.useState<number>(0);\n  const [isXTurn, setIsXTurn] = React.useState<boolean>(true);\n  const [winner, setWinner] = React.useState<SquareType>(null);\n  const [winningMoves, setWinningMoves] = React.useState<number[] | null>(null);\n  const [isSortAsc, setSortAsc] = React.useState<boolean>(true);\n\n  //EXTENSION:\n  const [WIDTH, setWidth] = React.useState<number>(5);\n  const [NUM_TO_WIN, setNumToWin] = React.useState<number>(5);\n\n  /**\n   * A callback whenever a player click on an square\n   * @param i square index in the boardState\n   */\n  const handleClick = (i: number): void => {\n    const newMoveHistory = moveHistory.slice(0, stepNumber + 1);\n    const history = boardHistory.slice(0, stepNumber + 1);\n    const squares = history[history.length - 1].slice();\n\n    if (squares[i] || winner) return;\n    squares[i] = isXTurn ? 'X' : 'O';\n\n    const curWinner = calculateWinner(squares, WIDTH, NUM_TO_WIN);\n    if (curWinner) {\n      setWinner(curWinner[0]);\n      setWinningMoves(curWinner[1]);\n    }\n\n    setMoveHistory([...newMoveHistory, { row: Math.floor(i / WIDTH), col: i % WIDTH }]);\n    setBoardHistory([...history, [...squares]]);\n    setStepNumber(history.length);\n    setIsXTurn((xTurn) => !xTurn);\n  };\n\n  /**\n   * Jump to step number\n   * @param step Targeted step\n   */\n  const jumpTo = (step: number): void => {\n    setStepNumber(step);\n    setIsXTurn(step % 2 === 0);\n    const curWinner = calculateWinner(boardHistory[step], WIDTH, NUM_TO_WIN);\n    if (curWinner) {\n      setWinner(curWinner[0]);\n      setWinningMoves(curWinner[1]);\n    } else {\n      setWinner(null);\n      setWinningMoves(null);\n    }\n  };\n\n  /**\n   * Reset the board state to the initial state\n   */\n  const resetBoard = () => {\n    setMoveHistory([null]);\n    setBoardHistory([Array(9).fill(null)]);\n    setStepNumber(0);\n    setIsXTurn(true);\n    setWinner(null);\n    setWinningMoves(null);\n    setSortAsc(true);\n  };\n\n  /**\n   * A helper function to generate an array of indices with length E.g: [0,1,2,3,4]\n   * @param length Array length\n   * @param isAsc indices order.\n   * @returns return [0, 1, 2, ...] if isAsc == true, else returns [..., 2, 1, 0]\n   */\n  const getIndicesArr = (length: number, isAsc: boolean) => {\n    const res = Array(moveHistory.length)\n      .fill(null)\n      .map((_, idx) => idx);\n    return isAsc ? res : res.reverse();\n  };\n\n  /**\n   * Render status text depending on internal state\n   * @dev If the winner has been decided => return status text with the winner\n   *      If the stepNumber reach maximum => Draw\n   *      Otherwise return whose turn is next\n   * @returns {JSX.Element}\n   */\n  const statusText = (): JSX.Element => {\n    if (winner) return <p className={`status ${winner}`}>Winner: {winner}</p>;\n    if (stepNumber === WIDTH * WIDTH) return <p className=\"status\">DRAW!</p>;\n    return <p className={`status ${isXTurn ? 'X' : 'O'}`}>Next player: {isXTurn ? 'X' : 'O'}</p>;\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-info\">\n        <p className=\"details\">\n          <b>18127136 - Nguyen Dang Huynh Long</b>\n          <br />\n          BTCN01 - PTUDWNC - 18KTPM1\n        </p>\n        <div className=\"config\">\n          <label htmlFor=\"gamesize\">\n            Board: ({WIDTH}x{WIDTH})\n          </label>\n          <input\n            type=\"range\"\n            min=\"3\"\n            max=\"25\"\n            value={WIDTH}\n            onChange={(ev) => {\n              const value = Number(ev.target.value);\n              setWidth(value);\n              if (value < NUM_TO_WIN) setNumToWin(value);\n              resetBoard();\n            }}\n          />\n        </div>\n        <div className=\"config\">\n          <label htmlFor=\"gamesize\">Moves to win: {NUM_TO_WIN} </label>\n          <input\n            type=\"range\"\n            min=\"3\"\n            max={WIDTH > 5 ? 5 : WIDTH}\n            value={NUM_TO_WIN}\n            onChange={(ev) => {\n              setNumToWin(Number(ev.target.value));\n              resetBoard();\n            }}\n          />\n        </div>\n\n        <button onClick={() => setSortAsc((prev) => !prev)}>Sort: {isSortAsc ? 'DESC' : 'ASC'}</button>\n        <button onClick={() => resetBoard()}>Reset</button>\n        <ol>\n          {getIndicesArr(moveHistory.length, isSortAsc).map((index) => {\n            return (\n              <li key={index}>\n                <button className={`move-history ${index % 2 === 0 ? 'X' : 'O'} ${index === stepNumber && 'active'}`} onClick={() => jumpTo(index)}>\n                  {index === 0 ? 'Go to game start' : `Go to move #${index} (col: ${moveHistory[index]?.col}, row: ${moveHistory[index]?.row})`}\n                </button>\n              </li>\n            );\n          })}\n        </ol>\n      </div>\n\n      <div className=\"game-board\">\n        {statusText()}\n        <Board boardState={boardHistory[stepNumber]} width={WIDTH} height={WIDTH} onSquareClicked={handleClick} winningMoves={winningMoves} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/**\n * TODO:\\\n * [X] Display the location for each move in the format (col, row) in the move history list.\n * [X] Bold the currently selected item in the move list.\n * [X] Rewrite Board to use two loops to make the squares instead of hardcoding them. Rewrite winning rule to 5 consecutive squares.\n * [X] Add a toggle button that lets you sort the moves in either ascending or descending order.\n * [X] When someone wins, highlight the squares that caused the win.\n * [X] When no one wins, display a message about the result being a draw.\n */\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}